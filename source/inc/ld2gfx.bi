DECLARE SUB LD2put (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER, flip AS INTEGER)
DECLARE SUB LD2putf (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2putl (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2putwl (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, LightSeg AS INTEGER, LightPtr AS INTEGER, TempPtr AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2mixwl (SpriteSeg AS INTEGER, SpritePtr AS INTEGER, LightSeg AS INTEGER, LightPtr AS INTEGER, TempPtr AS INTEGER)
DECLARE SUB LD2andput (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER, flip AS INTEGER)
DECLARE SUB LD2copySprite (SrcSeg AS INTEGER, SrcPtr AS INTEGER, DestSeg AS INTEGER, DestPtr AS INTEGER)
DECLARE SUB LD2copyFull (Buffer1 AS INTEGER, Buffer2 AS INTEGER)
DECLARE SUB LD2cls (bufferSeg AS INTEGER, col AS INTEGER)
DECLARE SUB LD2andcls (bufferSeg AS INTEGER, col AS INTEGER)
DECLARE SUB LD2put65 (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2put65c (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2putCol65 (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, col AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2putCol65c (x AS INTEGER, y AS INTEGER, SpriteSeg AS INTEGER, SpritePtr AS INTEGER, col AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2pset (x AS INTEGER, y AS INTEGER, bufferSeg AS INTEGER, col AS INTEGER)
DECLARE SUB LD2fill (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2fillm (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, bufferSeg AS INTEGER)
DECLARE SUB LD2fillw (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, bufferSeg AS INTEGER)

DECLARE SUB LD2.cls (bufferNum AS INTEGER, col AS INTEGER)
DECLARE SUB LD2.fill (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, bufferNum AS INTEGER)
DECLARE SUB LD2.fillm (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, bufferNum AS INTEGER)
DECLARE SUB LD2.fillw (x AS INTEGER, y AS INTEGER, w AS INTEGER, h AS INTEGER, col AS INTEGER, butterRum AS INTEGER)
DECLARE SUB LD2.pset (x AS INTEGER, y AS INTEGER, col AS INTEGER, bufferNum AS INTEGER)
DECLARE SUB LD2.CopyBuffer (buffer1 AS INTEGER, buffer2 AS INTEGER)

DECLARE SUB LD2.FadeIn (speed AS INTEGER)
DECLARE SUB LD2.FadeOut (speed AS INTEGER, black AS INTEGER)
DECLARE SUB LD2.RestorePalette ()
DECLARE SUB LD2.ZeroPalette ()

DECLARE SUB LD2.RestoreBuffer (bufferNum AS INTEGER)
DECLARE SUB LD2.SaveBuffer (bufferNum AS INTEGER)

DECLARE SUB LD2.RefreshScreen ()
DECLARE SUB WaitForRetrace ()

DECLARE SUB GFX.InitBuffers ()
DECLARE FUNCTION GetBufferSeg%(bufferNum AS INTEGER)
DECLARE SUB SetBufferSeg (bufferNum AS INTEGER)

DECLARE SUB LD2.put65c (x AS INTEGER, y AS INTEGER, spriteSeg AS INTEGER, spritePtr AS INTEGER, bufferNum AS INTEGER)
DECLARE SUB LD2.putCol65c (x AS INTEGER, y AS INTEGER, spriteSeg AS INTEGER, spritePtr AS INTEGER, col AS INTEGER, bufferNum AS INTEGER)

DECLARE SUB LD2.LoadPalette (Filename AS STRING)
DECLARE SUB LD2.LoadBitmap (filename AS STRING, BufferNum AS INTEGER, Convert AS INTEGER)
