TYPE tInventory
  id AS INTEGER
  qty AS INTEGER
END TYPE

TYPE ConfigType
  showconsole     AS INTEGER
  gravity         AS SINGLE
  doorspeed       AS SINGLE
  punchspeed      AS SINGLE
  shotgunspeed    AS SINGLE
  machinegunspeed AS SINGLE
  pistolspeed     AS SINGLE
  deaglespeed     AS SINGLE
  runningspeed    AS SINGLE
  jumpingspeed    AS SINGLE
END TYPE

TYPE tGuts
  x AS SINGLE
  y AS SINGLE
  velocity AS SINGLE
  speed AS SINGLE
  id AS INTEGER
  flip AS INTEGER
  count AS INTEGER
END TYPE

TYPE tElevator
  x1 AS INTEGER
  y1 AS INTEGER
  x2 AS INTEGER
  y2 AS INTEGER
END TYPE

TYPE tItem
  x AS INTEGER
  y AS INTEGER
  item AS INTEGER
END TYPE

TYPE tDoor
  x1 AS INTEGER
  y1 AS INTEGER
  x2 AS INTEGER
  y2 AS INTEGER
  code AS INTEGER
  ani AS SINGLE
  anicount AS SINGLE
  mx AS INTEGER
  my AS INTEGER
END TYPE

DECLARE SUB AddMusic (id AS INTEGER, filepath AS STRING, loopmusic AS INTEGER)
DECLARE FUNCTION LD2.CheckPlayerFloorHit% ()
DECLARE FUNCTION LD2.CheckPlayerWallHit% ()
DECLARE FUNCTION LD2.CheckMobFloorHit% (mobId AS INTEGER)
DECLARE FUNCTION LD2.CheckMobWallHit% (mobId AS INTEGER)
DECLARE SUB LD2.CloseDoor (id AS INTEGER)
DECLARE SUB LD2.ConsoleCommand (commandText AS STRING)
DECLARE SUB LD2.DeleteMob (mobId AS INTEGER)
DECLARE FUNCTION LD2.EntityIsEnabled% (typeId AS INTEGER)
DECLARE SUB LD2.fillCircle (x AS INTEGER, y AS INTEGER, r AS INTEGER, col AS INTEGER, buffer AS INTEGER)
DECLARE FUNCTION LD2.GetStatusItem% (slot AS INTEGER)
DECLARE FUNCTION LD2.GetStatusAmount% (slot AS INTEGER)
DECLARE SUB LD2.LoadSprite (filename AS STRING, BufferNum AS INTEGER)
DECLARE SUB LD2.MakeSparks (x AS INTEGER, y AS INTEGER, Amount AS INTEGER, Dir AS INTEGER)
DECLARE SUB LD2.OpenDoor (id AS INTEGER)
DECLARE SUB LD2.ProcessDoors ()
DECLARE SUB LD2.RefreshPlayerAccess ()
DECLARE SUB LD2.RotatePalette ()
DECLARE SUB LD2.SetCodeLevel (Num AS INTEGER)
DECLARE SUB LD2.SetConfig (optionName AS STRING, optionVal AS SINGLE)
DECLARE SUB LD2.SetFloor (x AS INTEGER, y AS INTEGER, blocked AS INTEGER)
DECLARE SUB LD2.SetAllowedEntities (codeString AS STRING)
DECLARE SUB LD2.SetGameMode (mode AS INTEGER)
DECLARE SUB LD2.SetPlayerState (state AS INTEGER)
DECLARE SUB LD2.SetRevealText (Text AS STRING)
DECLARE SUB LD2.SetShotgun (OnOff AS INTEGER)



DECLARE FUNCTION IntToBase64$ (i AS INTEGER)
DECLARE FUNCTION GetSpriteHash$ (spriteSeg AS INTEGER, spritePtr AS INTEGER)
DECLARE SUB MixTiles (spriteSeg AS INTEGER, lightSeg AS INTEGER, tileMapSeg AS INTEGER, mixMapSeg AS INTEGER, lightMapSeg AS INTEGER)



DECLARE FUNCTION PeekBitmap% (x AS INTEGER, y AS INTEGER)
DECLARE SUB PokeBitmap (x AS INTEGER, y AS INTEGER, value AS INTEGER)
DECLARE SUB SetBitmap (segment AS INTEGER, offset AS INTEGER, pitch AS INTEGER)



DECLARE FUNCTION File.getSize& (filename AS STRING)
DECLARE FUNCTION File.getAllocSize& (filename AS STRING)



CONST TESTMODE = 1
CONST DEBUGMODE = 2

'= SPRITES (LD2TILES.PUT)
'========================
CONST DOOR0 = 89
CONST DOOR1 = 90
CONST DOOR2 = 91
CONST DOOR3 = 92
CONST DOORW = 106
CONST DOORBACK = 52
CONST DOOROPEN = 101
CONST LARRYCROUCH = 28

'= PLAYER STATES
'========================
CONST STILL = 1
CONST RUNNING = 2
CONST JUMPING = 3
CONST CROUCHING = 4


'= ENEMY/ENTITY STATES
'========================
CONST SPAWNED = 1
CONST HOSTILE = 2
CONST PLANNING = 3
CONST MOVING = 4

CONST DOOROPENSPEED = .2
CONST DOORCLOSESPEED = -.2

'= BYTES PER SPRITE
'========================
CONST EPS = 130

'= THE ALMIGHT PIE
'= (PIE FLAVORED!)
'========================
CONST PI = 3.141592

'= ARRAY MAXES
'========================
CONST MAXGUTS      = 100
CONST MAXITEMS     = 100 '- 100 in case of player moving every item possible to one room (is 100 even enough then?)
CONST MAXDOORS     =  16 '- per room
CONST MAXFLOORS    =  23
CONST MAXINVENTORY =   7
CONST MAXTILES     = 120
